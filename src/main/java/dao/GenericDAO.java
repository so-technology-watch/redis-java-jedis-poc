/*
 * Created on 2017-01-27 ( Time 10:07:28 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */
package dao;

import java.io.IOException;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.sql.DataSource;

import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.JsonParseException;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;

import bean.Car;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.ScanParams;
import redis.clients.jedis.ScanResult;
import redis.clients.jedis.exceptions.JedisException;

/**
 * Generic abstract class for basic JDBC DAO
 * 
 * @author Telosys Tools
 *
 * @param <T>
 */
public abstract class GenericDAO<T> {

	private final static int INITIAL_POSITION = 1;

	/**
	 * The DataSource providing the connections
	 */
	private final Jedis jedis;

	/**
	 * Constructor
	 */
	protected GenericDAO() {
		super();
		this.jedis = ClientProvider.getJedisInstance();
	}

	protected abstract T newInstance();

	/**
	 * Returns the SQL SELECT REQUEST to be used to retrieve all the occurrences
	 * 
	 * @return
	 */
	protected abstract String getSelectAll();

	/**
	 * Populates the bean attributes from the given ResultSet
	 * 
	 * @param rs
	 * @param bean
	 * @return
	 * @throws SQLException
	 */
	protected abstract String getSetValuesForId(T bean);

	// -----------------------------------------------------------------------------------------
	private Jedis getClient() {
		return jedis;
	}

	// -----------------------------------------------------------------------------------------
	private void closeClient(Jedis client) {
		if (client != null) {
			try {
				client.close();
				;
			} catch (JedisException e) {
			}
		}
	}

	// -----------------------------------------------------------------------------------------
	/**
	 * Loads the given bean from the database using its primary key (SQL
	 * SELECT)<br>
	 * The given bean is populated from the ResultSet if found
	 * 
	 * @param bean
	 * @return true if found and loaded, false if not found
	 * @throws IOException
	 * @throws JsonMappingException
	 * @throws JsonParseException
	 */
	protected boolean doSelect(T bean) throws JsonParseException, JsonMappingException, IOException {

		boolean result = false;
		Jedis jedis = null;
		ObjectMapper mapper = new ObjectMapper();

		try {
			jedis = getClient();
			String id = getSetValuesForId(bean);
			if(jedis.exists(id)){
			String beanInJson = jedis.get(id);
			T res = mapper.readValue(beanInJson, (Class<T>) newInstance());
			if (res != null) {
				result = true;
			} else {
				result = false;
			}
			}else{
				throw new RuntimeException("this bean doesn't exist");
			}
		} catch (JedisException e) {
			throw new RuntimeException(e);
		} finally {
			closeClient(jedis);
		}
		return result;
	}

	// -----------------------------------------------------------------------------------------
	/**
	 * Returns all the occurrences existing in the database
	 * 
	 * @return
	 * @throws IOException
	 * @throws JsonMappingException
	 * @throws JsonParseException
	 */

	protected List<T> doSelectAll() throws JsonParseException, JsonMappingException, IOException {

		ObjectMapper mapper = new ObjectMapper();
		List<T> list = new LinkedList<T>();
		Jedis jedis = null;

		try {
			jedis = getClient();
			ScanParams params = new ScanParams();
			params.match(getSelectAll());
			ScanResult<String> scanResult = jedis.scan("0", params);
			List<String> keys = scanResult.getResult();
			for (String key : keys) {
				String beanInJson = jedis.get(key);
				T bean = newInstance();
				bean = mapper.readValue(beanInJson, (Class<T>) newInstance());
				list.add(bean);
			}

		} catch (JedisException e) {
			throw new RuntimeException(e);
		} finally {
			closeClient(jedis);
		}
		return list;
	}

	// -----------------------------------------------------------------------------------------
	/**
	 * Inserts the given bean in the database (SQL INSERT)
	 * 
	 * @param bean
	 * @throws IOException
	 * @throws JsonMappingException
	 * @throws JsonGenerationException
	 */
	protected void doInsert(T bean) throws JsonGenerationException, JsonMappingException, IOException {
		ObjectMapper mapper = new ObjectMapper();
		Jedis jedis = null;
		try {
			jedis = getClient();
			String id = getSetValuesForId(bean);
			if (!jedis.exists(id)) {
				String beanInJson = mapper.writeValueAsString(bean);
				jedis.set(id, beanInJson);
			} else {
				throw new RuntimeException("this key already exist");
			}
		} catch (JedisException e) {
			throw new RuntimeException(e);
		} finally {
			closeClient(jedis);
		}
	}

	// -----------------------------------------------------------------------------------------
	/**
	 * Updates the given bean in the database (SQL UPDATE)
	 * 
	 * @param bean
	 * @return the JDBC return code (i.e. the row count affected by the UPDATE
	 *         operation : 0 or 1 )
	 */
	protected int doUpdate(T bean) {
		int result = 0;
		Jedis jedis = null;
		try {
			jedis = getClient();
			PreparedStatement ps = conn.prepareStatement(getSqlUpdate());
			// --- Call specific method to set the values to be updated and the
			// primary key
			setValuesForUpdate(ps, INITIAL_POSITION, bean);
			// --- Execute SQL UPDATE
			result = ps.executeUpdate();
			ps.close();
		} catch (SQLException e) {
			throw new RuntimeException(e);
		} finally {
			closeConnection(conn);
		}
		return result;
	}

	// -----------------------------------------------------------------------------------------
	/**
	 * Deletes the given bean in the database (SQL DELETE)
	 * 
	 * @param bean
	 * @return the JDBC return code (i.e. the row count affected by the DELETE
	 *         operation : 0 or 1 )
	 */
	protected int doDelete(T bean) {
		int result = 0;
		Connection conn = null;

		try {
			conn = getConnection();
			PreparedStatement ps = conn.prepareStatement(getSqlDelete());
			// --- Set the PRIMARY KEY ( SQL "WHERE ..." )
			setValuesForPrimaryKey(ps, INITIAL_POSITION, bean);
			// --- Execute SQL DELETE
			result = ps.executeUpdate();
			ps.close();
		} catch (SQLException e) {
			throw new RuntimeException(e);
		} finally {
			closeConnection(conn);
		}
		return result;
	}

	// -----------------------------------------------------------------------------------------
	/**
	 * Checks if the given bean exists in the database (SQL SELECT COUNT(*) )
	 * 
	 * @param bean
	 * @return
	 */
	protected boolean doExists(T bean) {

		long result = 0;
		Connection conn = null;

		try {
			conn = getConnection();
			PreparedStatement ps = conn.prepareStatement(getSqlCount());
			// --- Set the PRIMARY KEY ( SQL "WHERE ..." )
			setValuesForPrimaryKey(ps, INITIAL_POSITION, bean);
			// --- Execute SQL COUNT
			ResultSet rs = ps.executeQuery();
			if (rs.next()) {
				result = rs.getLong(1);
			}
			rs.close();
			ps.close();
		} catch (SQLException e) {
			throw new RuntimeException(e);
		} finally {
			closeConnection(conn);
		}
		return result > 0;
	}

	// -----------------------------------------------------------------------------------------
	/**
	 * Counts all the occurrences in the table ( SQL SELECT COUNT(*) )
	 * 
	 * @return
	 */
	protected long doCountAll() {

		long result = 0;
		Connection conn = null;
		try {
			conn = getConnection();
			PreparedStatement ps = conn.prepareStatement(getSqlCountAll());
			// --- Execute SQL COUNT (without where clause)
			ResultSet rs = ps.executeQuery();
			if (rs.next()) {
				result = rs.getLong(1);
			}
			rs.close();
			ps.close();
		} catch (SQLException e) {
			throw new RuntimeException(e);
		} finally {
			closeConnection(conn);
		}
		return result;
	}

	// -----------------------------------------------------------------------------------------
	protected void setValue(PreparedStatement ps, int i, String value) throws SQLException {
		ps.setString(i, value);
	}

	// -----------------------------------------------------------------------------------------
	protected void setValue(PreparedStatement ps, int i, Boolean value) throws SQLException {
		ps.setBoolean(i, value);
	}

	// -----------------------------------------------------------------------------------------
	protected void setValue(PreparedStatement ps, int i, java.util.Date value) throws SQLException {
		if (value != null) {
			ps.setDate(i, new java.sql.Date(value.getTime())); // Convert
																// util.Date to
																// sql.Date
		} else {
			ps.setNull(i, java.sql.Types.DATE);
		}
	}

	// -----------------------------------------------------------------------------------------
	protected void setValue(PreparedStatement ps, int i, java.sql.Date value) throws SQLException {
		ps.setDate(i, value);
	}

	// -----------------------------------------------------------------------------------------
	protected void setValue(PreparedStatement ps, int i, java.sql.Time value) throws SQLException {
		ps.setTime(i, value);
	}

	// -----------------------------------------------------------------------------------------
	protected void setValue(PreparedStatement ps, int i, java.sql.Timestamp value) throws SQLException {
		ps.setTimestamp(i, value);
	}

	// -----------------------------------------------------------------------------------------
	protected void setValue(PreparedStatement ps, int i, Byte value) throws SQLException {
		if (value != null) {
			ps.setByte(i, value.byteValue());
		} else {
			ps.setNull(i, java.sql.Types.TINYINT); // JDBC : "TINYINT" =>
													// getByte/setByte
		}
	}

	// -----------------------------------------------------------------------------------------
	protected void setValue(PreparedStatement ps, int i, Short value) throws SQLException {
		if (value != null) {
			ps.setShort(i, value.shortValue());
		} else {
			ps.setNull(i, java.sql.Types.SMALLINT);
		}
	}

	// -----------------------------------------------------------------------------------------
	protected void setValue(PreparedStatement ps, int i, Integer value) throws SQLException {
		if (value != null) {
			ps.setInt(i, value.intValue());
		} else {
			ps.setNull(i, java.sql.Types.INTEGER);
		}
	}

	// -----------------------------------------------------------------------------------------
	protected void setValue(PreparedStatement ps, int i, Long value) throws SQLException {
		if (value != null) {
			ps.setLong(i, value.longValue());
		} else {
			ps.setNull(i, java.sql.Types.BIGINT); // JDBC : "BIGINT" =>
													// getLong/setLong
		}
	}

	// -----------------------------------------------------------------------------------------
	protected void setValue(PreparedStatement ps, int i, Float value) throws SQLException {
		if (value != null) {
			ps.setFloat(i, value.floatValue());
		} else {
			ps.setNull(i, java.sql.Types.FLOAT);
		}
	}

	// -----------------------------------------------------------------------------------------
	protected void setValue(PreparedStatement ps, int i, Double value) throws SQLException {
		if (value != null) {
			ps.setDouble(i, value.doubleValue());
		} else {
			ps.setNull(i, java.sql.Types.DOUBLE);
		}
	}

	// -----------------------------------------------------------------------------------------
	protected void setValue(PreparedStatement ps, int i, BigDecimal value) throws SQLException {
		ps.setBigDecimal(i, value);
	}

	// -----------------------------------------------------------------------------------------
	protected void setValue(PreparedStatement ps, int i, byte[] value) throws SQLException {
		ps.setBytes(i, value);
	}

}
