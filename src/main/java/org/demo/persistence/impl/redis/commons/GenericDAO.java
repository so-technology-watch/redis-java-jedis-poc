/*
 * Created on 2017-01-27 ( Time 10:07:28 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */
package org.demo.persistence.impl.redis.commons;

import java.io.IOException;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.List;

import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.JsonParseException;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
import redis.clients.jedis.ScanParams;
import redis.clients.jedis.ScanResult;
import redis.clients.jedis.exceptions.JedisException;

/**
 * Generic abstract class for basic JDBC DAO
 * 
 * @author Terrence
 *
 * @param <T>
 */
public abstract class GenericDAO<T> {

	/**
	 * The DataSource providing the connections
	 */
	private final JedisPool redisPool;

	/**
	 * Constructor
	 */
	protected GenericDAO() {
		super();
		this.redisPool = ClientProvider.getJedisInstance();
	}

	protected abstract T newInstance();

	/**
	 * Returns the SQL SELECT REQUEST to be used to retrieve all the occurrences
	 * 
	 * @return
	 */
	protected abstract String getSelectAll();

	/**
	 * Returns the SQL SELECT REQUEST to be used to retrieve all the occurrences
	 * 
	 * @return
	 */
	protected abstract String getEntity();

	/**
	 * Populates the bean attributes from the given ResultSet
	 * 
	 * @param rs
	 * @param bean
	 * @return
	 * @throws SQLException
	 */
	protected abstract String getSetValuesForId(T bean);

	// -----------------------------------------------------------------------------------------
	private JedisPool getConnexion() {
		return redisPool;
	}

	// -----------------------------------------------------------------------------------------
	@SuppressWarnings("unused")
	private void closeConnexion(JedisPool redisPool) {
		if (redisPool != null) {
			try {
				redisPool.destroy();
				;
				redisPool = null;
			} catch (JedisException e) {
			}
		}
	}

	// -----------------------------------------------------------------------------------------
	private void closeClient(Jedis client) {
		if (client != null) {
			try {
				client.close();
				client = null;
			} catch (JedisException e) {
			}
		}
	}

	// -----------------------------------------------------------------------------------------
	/**
	 * Loads the given bean from the database using its primary key The given
	 * bean is populated from the ResultSet if found
	 * 
	 * @param bean
	 * @return true if found and loaded, false if not found
	 * @throws IOException
	 * @throws JsonMappingException
	 * @throws JsonParseException
	 */

	@SuppressWarnings("unchecked")
	protected T doSelect(T bean) throws JsonParseException, JsonMappingException, IOException {
		Jedis jedis = null;
		ObjectMapper mapper = new ObjectMapper();

		try {
			jedis = getConnexion().getResource();
			String id = getSetValuesForId(bean);
			if (jedis.exists(id)) {
				String beanInJson = jedis.get(id);
				return (T) mapper.readValue(beanInJson, bean.getClass());

			}
		} catch (JedisException e) {
			throw new RuntimeException(e);
		} finally {
			closeClient(jedis);
		}
		return null;
	}

	// -----------------------------------------------------------------------------------------
	/**
	 * Returns all the occurrences existing in the database
	 * 
	 * @return
	 * @throws IOException
	 * @throws JsonMappingException
	 * @throws JsonParseException
	 */

	@SuppressWarnings("unchecked")
	protected List<T> doSelectAll() throws JsonParseException, JsonMappingException, IOException {

		ObjectMapper mapper = new ObjectMapper();
		List<T> list = new LinkedList<T>();
		Jedis jedis = null;

		try {
			jedis = getConnexion().getResource();
			ScanParams params = new ScanParams();
			params.match(getSelectAll());
			ScanResult<String> scanResult = jedis.scan("0", params);
			List<String> keys = scanResult.getResult();
			for (String key : keys) {
				String beanInJson = jedis.get(key);
				T bean = newInstance();
				bean = (T) mapper.readValue(beanInJson, bean.getClass());
				list.add(bean);
			}

		} catch (JedisException e) {
			throw new RuntimeException(e);
		} finally {
			closeClient(jedis);
		}
		return list;
	}

	// -----------------------------------------------------------------------------------------
	/**
	 * Inserts the given bean in the database (Redis)
	 * 
	 * @param bean
	 * @throws IOException
	 * @throws JsonMappingException
	 * @throws JsonGenerationException
	 */
	protected String doInsert(T bean) throws JsonGenerationException, JsonMappingException, IOException {
		String result = "KO";
		ObjectMapper mapper = new ObjectMapper();
		Jedis jedis = null;
		try {
			jedis = getConnexion().getResource();
			long nextId = autoIncr();
			setBeanId(bean, nextId);
			String id = getSetValuesForId(bean);
			if (!jedis.exists(id)) {
				String beanInJson = mapper.writeValueAsString(bean);
				result = jedis.set(id, beanInJson);
			} else {
				throw new RuntimeException("this bean already exist");
			}
		} catch (JedisException e) {
			throw new RuntimeException(e);
		} finally {
			closeClient(jedis);
		}

		return result;
	}

	// -----------------------------------------------------------------------------------------
	/**
	 * Updates the given bean in the database (Redis)
	 * 
	 * @param bean
	 * @return the Redis return code (i.e. the row count affected by the UPDATE
	 *         operation : 0 or 1 )
	 * @throws IOException
	 * @throws JsonMappingException
	 * @throws JsonGenerationException
	 */
	protected String doUpdate(T bean) throws JsonGenerationException, JsonMappingException, IOException {
		ObjectMapper mapper = new ObjectMapper();
		String result = "KO";
		Jedis jedis = null;
		try {
			jedis = getConnexion().getResource();
			String id = getSetValuesForId(bean);
			if (jedis.exists(id)) {
				String beanInJson = mapper.writeValueAsString(bean);
				result = jedis.set(id, beanInJson);
			} else {
				throw new RuntimeException("this bean doesn't exist");
			}

		} catch (JedisException e) {
			throw new RuntimeException(e);
		} finally {
			closeClient(jedis);
		}
		return result;
	}

	// -----------------------------------------------------------------------------------------
	/**
	 * Deletes the given bean in the database (Redis)
	 * 
	 * @param bean
	 * @return the Redis return code (i.e. the row count affected by the DELETE
	 *         operation : 0 or 1 )
	 */
	protected long doDelete(T bean) {
		long result = 0;
		Jedis jedis = null;
		try {
			jedis = getConnexion().getResource();
			String id = getSetValuesForId(bean);
			if (jedis.exists(id)) {
				result = jedis.del(id);
			} else {
				throw new RuntimeException("this bean doesn't exist");
			}
		} catch (JedisException e) {
			throw new RuntimeException(e);
		} finally {
			closeClient(jedis);
		}
		return result;
	}

	// -----------------------------------------------------------------------------------------
	/**
	 * Checks if the given bean exists in the database)
	 * 
	 * @param bean
	 * @return
	 */
	protected boolean doExists(T bean) {
		boolean result = false;
		Jedis jedis = null;
		try {
			jedis = getConnexion().getResource();
			String id = getSetValuesForId(bean);
			result = jedis.exists(id);
		} catch (JedisException e) {
			throw new RuntimeException(e);
		} finally {
			closeClient(jedis);
		}
		return result;
	}

	// -----------------------------------------------------------------------------------------
	/**
	 * Counts all the occurrences in the table ( SQL SELECT COUNT(*) )
	 * 
	 * @return
	 */
	protected int doCountAll() {

		int result = 0;
		Jedis jedis = null;
		try {
			jedis = getConnexion().getResource();
			ScanParams params = new ScanParams();
			params.match(getSelectAll());
			ScanResult<String> scanResult = jedis.scan("0", params);
			List<String> keys = scanResult.getResult();
			result = keys.size();
		} catch (JedisException e) {
			throw new RuntimeException(e);
		} finally {
			closeClient(jedis);
		}
		return result;
	}

	// -----------------------------------------------------------------------------------------
	/**
	 * Counts all the occurrences in the table
	 * 
	 * @return
	 */
	protected long autoIncr() {
		long result = 1L;
		Jedis jedis = null;
		try {
			jedis = getConnexion().getResource();
			if (jedis.get(getEntity()) != null) {
				result = jedis.incr(getEntity());
				return result;
			}
		} catch (JedisException e) {
			throw new RuntimeException(e);
		} finally {
			closeClient(jedis);
		}
		jedis.set(getEntity(), "1");
		return result;
	}

	protected void setBeanId(T bean, long id) {
		// TODO Auto-generated method stub

	}
}
